using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Threading.Tasks;

namespace ElGamal.Services
{
    public class CryptoService : ICryptoService
    {
        private List<int> firstPrimes = new List<int>();
        private List<BigInteger> primes = new List<BigInteger>
        {
            BigInteger.Parse("984026915256774093038377596365769859735777144367018426281219358297716523261947394049903853624961248860650006157667626222052689352590230550413184190140463341080139994247082438214940173737548697512345244549504277444179136992001088707691470973203151932557300322053564893090597251657625398885285925876767370631561441084121845963941100860353220758044990268204402706159316163474493913895337268376840140933322498281081894129242380083426119282129996065559600168652008342884536123131146969370100352852869739532849006610339702838414424906110134085667309289305206043829460914198779676341008486329783943649451229362411306335494036509686162036317272223146217018017521567153273019607290406346029147342512054229123769501335413488940037409383733729491677394759123003359483761799382235338322733189403148351251330386966858170211931638710756909577988051096952750594052243704630528848577343400329723143462342415903157889329859598143868368214292712766297124917521716352713892955706899580894575153688138002229595785859459984467769216952734159537338886632543880932528543903115191740182015128825046636759665027642439657620219693764101612833189824103765015445406078374632653517578019505044231830016661616041739253458061542069522654260261308292408160808239743"),
            BigInteger.Parse("892514564174137780909611211053547566221444745905610147302604448916303288403445418889147617335473185521141784604380232026032142466689262957864897609405490710033306311632099956920439494448858611619585119429501164698862507226979065814877981530123813256919482936178327056290785738740979862326338069692309312248717476714267979387964382825097830468320637048964854076591447269973185148854133971794120060046747935225874616044317373000016115517887303774495285100291110063655468899151155168854400461536779925095147022224000765384382366881239420768503118723573088903933152802245599087922619272859987695903528517263657352406774988232826789175617815819343788804140923094548806869159390828950926715894950027626687297371992537974780761537497255268433831236307763562214687856922369427053794434968209094436097727184331848802571805910477388635254130794870441030810146808268820977843335742668338169488243279321393633801976885815666081035972108019567514027619912058353971787755990104700678675396460469481632043649565559333958967985452391801579099807537452840543936559592567967676924154750939870997297943744086585606141265600698387935372196252112232903119275327587281631324008021089158495182519044124914885233865379964392823441598053080944489647914647247"),
            BigInteger.Parse("1012064833688222676996816324352423437137175391403589913483413152255884724102303150080547975485010942490725985946121900097430627885300605023834645745706728166527987113751210723803435860187946050081348342345237700802559635493167869736881783240169791726774555377469036090931630327299656749766255849016561693597901528432136019016198129845384422023653998611401568119547751805458363958795995934135771741436637547637292185206281822837871349181309678563379035008754426936568096859036461325814666779183365985199839976531856245374102324962313474950197371838322856738138461212172310697944086971665607657503943575024063309191448029646725701754513670800588401991123385593920977807145361828409154436851043079107093189738730704488908898143804003284811546820850346543175467642388880339195130945247201693127041100006070187197954171783809354027546861500757672973906533353366832067899307763876627738793006951002864059440738075969711299471228112759501063492081888469263073092298097607826848576435091587045888355102317178384351421073977582111657707883862268785554752774322939060883472733773443028009445491970726112668144976641425303614921186385168296144994467186876825598608839377509091164763046757927979956734780322766778643197328278134802575305933456603"),
            BigInteger.Parse("1020537523593100804370805356697215236400546591946178538176595982362440231482035536266999909795824395868486278404737125301933744292798750289296280759209181403033241252717557744359540481054086703216810452790425262389865437451566540012936024603281236730184302603299796306593106721169990889541778225172527328326685237612248093339690985715638712007865506807975583876446133291350827254418772464431618288266934878119350551154280346932539840757685635219443103765888739923817966217659681673544208113549579042636249023187207485367895769633050997042989615880270989468840435727125987548212343757643175288775374069747198993248732017277400039057463309546431000977688581072549639854171558653624024433139581422430818099617228845866463269505263510166527556011514380934273232897107512104146229909472801342405072119906302010756172653355001644309318712204560673066578847986089733120495551920311750020266379940864321945620678510216136858755970808515883001727213397606188723452873504538516391049455939195728797539158511343995270610902016921238388460079151788569722800023715342262723609477405954371402187988358384647998634406857003765513574503192794390745184545621992973665828356375210718900995190253177337659353676616306657289740699729386066119640020671427"),
            BigInteger.Parse("917350576490489174125248064606370990805187750417349017945455277478888493550753719398766311577896340451445110895088554249289612919820174582695726105280797903488237228131320316628244263448155249021708514090075023611890863258347380561816276620965317058490719142966968404073127592404253905377876695421600106676455356851749740371874021142654080536371203567485451608745286582284527500859522214829719146627477006432084989045121586232342212821029788259622765790711126260684365948296213921295346208522617238262646304714069298520615658940904830359909917543559754945574023587454629064677529637656903899253597935530844700390305673273812484825939537991166599659009333212348041820069776323157933604225753666753511120450291161626838738810374049700079834504697770727738997257424631165455859733818739641153106884025665923356897417818869637557076558696121740921749179949270876895418716697484125544269463329704666593957483904171325902778163409939595798150937609845267312276732564726974779196036954969865541157132423327777581488840308682431184716078595398808123100707567476795389022879394507191605577402403130769203238861391266584692442683742955679382801467076416643048263148071983177032325632930884119778901554136586055111048208784363021642654005366833"),
            BigInteger.Parse("841260151185912633145174006643671502698929000671913445260743923962960199627131045809625825979633508606179315902150054208069056496770240728860235059303834496392842714207749968389514652915436909449685309859483135879358563308237126023790014236683776454802143864653668613393289815330984959151762855786035896321934799034085562964857807856980210043981704492075968768063937472365882609444800629584364078072080434929365583495285284747198776288196380543257057006956118973575105043068818900256988618104046406256309526479052020402839586693610247981682061609946607696057044699522588081592016939221482811491457889686463230501655059472416293083677582443468876569213641422516426360910672432245514979409006144727689266401715286304864649798975543040290387303643764422841057668229219328299792841281501377461528203524231716584202376636339528440023898002978909981048486870996785676939601913900386992618241316008539625079340916814092102537369562008038745663859411392695152276022444173255523748584068319897912673981281506042391244572319840515552951038818336476703887940019694254413141907459660548240512504944550645166719075008008084233740776767125060403275723734725285646741292708580243725556202904413640854752346141959490190355512597456943456030244867669"),
            BigInteger.Parse("1001551768330353244621622542105312085148800264037404291225174412181292203221508166299101827541616852089351106410630829572365379271296326755757917699570120352755079794027052207524952791765789857505001714123226604268904420976170698569177826683669269456938517707112261349089933817901591297249633278509799894726107824071180187184960430538081777191212194875990096176295916145493108171658952501005281528448839548662617518357826218074882684653992210800565186126798689638676460338999869939568266907713714872736809117365867349587176004934953295937973106504899414062772714433746284828853409696912601588269893746170352161042066956568098819142524358310404599403691741070668097690243005988936268355223374052981115812452067920719971582165088261660069224732616263260016271451205501682841685122440535671302710397061678888191963479825508573676570317942912459899147514174258389780797235803422121756213005307968206180337856189242745381845431934214524137464768733353489200134473516627895509753104628123841818220174341377514912134861067979194343254703497138462962658415243186239477966923875103688151738628859979259357348475781881902413148008865728247915607051449689667759176687717597043688881717893920240362533471782450869678831360212274835210342442418483"),
            BigInteger.Parse("784074002291374535255407747683530121312482354527723989869391902639214834692171771682706142803685439495204455595872511889591980892449683288866865288508334317712348564524111612063297222110495548688702093601348203610812909769282372847333751666132273262260927520035971600685186471877816541972359832195561982055818491902866622410483366950721702271903587589678596021892871597317496849297737166757421550921165248106998090265721535567530226167703245541433848387952881451866565635317365948879013116850086765630849965659607045578702736042897355248281692042805732068765416828295274781638009685180473542006576261498117468077755274505801265815864953440682147388741468889594998196501254406436513807922903630377125548989362254407687202222050632240581494165359527845654726842184048195871824609540196151267856369485008277641901720124578231949564196511867398991662469688527691372394644223962087191413730472889020496082501169456033778787829816961232766799966380620444141456619997345494237632707584174100971274115024769537608931649348651075960073135813867447535338261509334644825877232135833942223167345337929190827598499474107548518579924178689595919601098538266323955853619230545225181972522806405406507629193820065277945400962083997101443249082217429"),
            BigInteger.Parse("846898502281962578815108803681470062906285162147207989869870091701602062355034982946366272251476905925769173796570612190724658567982638453578943828795610715435044700737360251814635768411726392063816654292119257071158365016594815545129004671420802887624018952723679757306585955656576352884224797877506358865560535997759029280469975038528804689524178488828419011737590546991650204709095740476802026470834123694420425348135969648060598591604624920398763311701043139871467849326861448083961021033899948008944212819927420156117272004191390369869026028316241270379941049121649987876862487261476551472525007895073876891143612128153764866108589133860334084583038888118255942016823837792798459101053195391567732506683844363423804715605277257510515669933252522453842285770017654607326894945914558012452585403360413209368726553556303309984180195751168165090156619914865820372225045214733655304962206850434252329394872315204039105724582563998664368834919146573848376872260904563333202439337370551478741770873163297650165831517064383664737382664927828353517245484542938607280240584252464184590594831238044901129382559787669011112838942000639367023337774218441694346428738359013735737025772389098813224126334843606132249165514826274908301113856763"),
            BigInteger.Parse("1020537523593100804370805356697215236400546591946178538176595982362440231482035536266999909795824395868486278404737125301933744292798750289296280759209181403033241252717557744359540481054086703216810452790425262389865437451566540012936024603281236730184302603299796306593106721169990889541778225172527328326685237612248093339690985715638712007865506807975583876446133291350827254418772464431618288266934878119350551154280346932539840757685635219443103765888739923817966217659681673544208113549579042636249023187207485367895769633050997042989615880270989468840435727125987548212343757643175288775374069747198993248732017277400039057463309546431000977688581072549639854171558653624024433139581422430818099617228845866463269505263510166527556011514380934273232897107512104146229909472801342405072119906302010756172653355001644309318712204560673066578847986089733120495551920311750020266379940864321945620678510216136858755970808515883001727213397606188723452873504538516391049455939195728797539158511343995270610902016921238388460079151788569722800023715342262723609477405954371402187988358384647998634406857003765513574503192794390745184545621992973665828356375210718900995190253177337659353676616306657289740699729386066119640020671427")
        };

        public CryptoService()
        {
            FirstPrimesInit();
        }

        public void FirstPrimesInit()
        {
            for (int i = 3; i < 2000; ++i)
            {
                bool prime = true;
                for (int j = 2; j < Math.Sqrt(i); ++j)
                {
                    if (i % j == 0)
                    {
                        prime = false;
                        break;
                    }
                }
                if (prime) firstPrimes.Add(i);
            }
        }

        public void GenerateSessionKeys()
        {

        }

        public BigInteger GetBigPrime()
        {
            Random r = new Random();
            int rand = r.Next(0, 9);
            return primes[rand];
        }

        public BigInteger GcdExtent(BigInteger a, BigInteger b, ref BigInteger x, ref BigInteger y)
        {
            if (a == 0)
            {
                x = 0; y = 1;
                return b;
            }
            BigInteger x1, y1;
            BigInteger d = GcdExtent(b % a, a, ref x1, ref y1);
            x = y1 - (b / a) * x1;
            y = x1;
            return d;
        }

        //public BigInteger FindOpposite()
        //{
        //    BigInteger x, y;
        //    BigInteger g = GcdExtent(a, m, x, y);
        //    if (g != 1)
        //        return 0;
        //    else
        //    {
        //        x = (x % m + m) % m;
        //        cout << x;
        //    }
        //}
    }
}
